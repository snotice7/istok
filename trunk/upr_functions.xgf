<?xml version="1.0"?>
<!-- Functions and macros for font -->
<xgridfit xmlns="http://xgridfit.sourceforge.net/Xgridfit2">
 
 <!--
     Copyright (C) 2008, 2009, 2010  Andrey V. Panov
     
     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program.  If not, see "http://www.gnu.org/licenses/".
     
     -->
 
 <macro name="center-dotaccent">
  <param name="point-left"/>  <!-- reper-point -->
  <param name="point-right"/>  <!-- reper-point -->
  <param name="accent-left"/>
  <param name="accent-right"/>
  <param name="contour"/>
  
  <!--   <variable name="displacement-width"/> -->
  <with-round-state round="to-double-grid">
   <set-equal target="width" source="round((((coord(point-right) + coord(point-left)) - coord(accent-left))  - coord(accent-right)) / 2.0)"/>
   <if test="width != 0.0">
    <shift-absolute pixel-distance="width">
     <point num="accent-left"/>
    </shift-absolute>
    <shift>
     <reference>
      <point num="accent-left"/>
     </reference>
     <contour num="contour"/>
    </shift>
   </if>
  </with-round-state>
 </macro>
 <!-- center-accent-with-anchor-and-two-reper-points -->
 
 <!--  <function name="make-diagonal"> -->
  <macro name="make-diagonal">
   <param name="first-diag-first-point"/>
   <param name="first-diag-second-point"/>
   <param name="second-diag-first-point"/>
   <param name="second-diag-second-point"/>
   <param name="interpolation-point" value="-1"/>
   <param name="diag-width" value="-1"/>
   <!--   <param name="diag-min"/> -->
   <!--   <line name="first-diag">
    <point num="first-diag-first-point"/>
    <point num="first-diag-second-point"/>
   </line>
   <line name="second-diag">
    <point num="second-diag-first-point"/>
    <point num="second-diag-second-point"/>
   </line>-->
   <with-projection-vector to-line="orthogonal">
    <line>
     <point num="first-diag-first-point"/>
     <point num="first-diag-second-point"/>
    </line>   <!--    <line ref="first-diag"/> -->
    <!--    <move distance="absolute(diag-width)" round="no" cut-in="no" min-distance="diag-min-thick" color="black"> -->
     <compile-if test="(not(merge-mode) and diag-width >= 0) or
      (merge-mode and nan(diag-width)) &gt;= 0">
      <move distance="diag-width" round="no" cut-in="no" min-distance="diag-min-thick" color="black">
       <reference>
        <point num="first-diag-first-point"/>
       </reference>
       <point num="second-diag-first-point"/>
      </move>
      <else>
       <move round="no" min-distance="diag-min-thick" color="black">
        <reference>
         <point num="first-diag-first-point"/>
        </reference>
        <point num="second-diag-first-point"/>
       </move>
      </else>
     </compile-if>
    </with-projection-vector>
    <!--  <with-freedom-vector to-line="parallel">
     <line ref="first-diag"/>
     <with-projection-vector axis="y">
      <align>
       <reference>
        <point num="first-diag-first-point"/>
       </reference>
       <point num="second-diag-first-point"/>
      </align>
     </with-projection-vector>
    </with-freedom-vector>-->
    <if test="not(is-glyph-grayscale)">
     <mdap round="yes">
      <point num="second-diag-first-point"/>
     </mdap>
    </if>
    <with-vectors to-line="orthogonal">
     <!--    <line ref="first-diag"/> -->
     <line>
      <point num="first-diag-first-point"/>
      <point num="first-diag-second-point"/>
     </line>
     <align>
      <reference>
       <point num="second-diag-first-point"/>
      </reference>
      <point num="second-diag-second-point"/>
     </align>
    </with-vectors>
    <compile-if test="interpolation-point &gt;= 0">
     <with-freedom-vector to-line="parallel">
      <!--    <line ref="first-diag"/> -->
      <line>
       <point num="first-diag-first-point"/>
       <point num="first-diag-second-point"/>
      </line>
      <with-projection-vector axis="y">
       <interpolate>
        <reference>
         <point num="first-diag-first-point"/>
         <point num="interpolation-point"/>
        </reference>
        <point num="second-diag-second-point"/>
       </interpolate>
      </with-projection-vector>
     </with-freedom-vector>
    </compile-if>
   </macro>
   <!--  </function> -->
  
  <function name="center-accent-with-anchor-and-two-reper-points">
   <!--the same as previous (center-point-with-two-reper-points) but with an additional contour-->
   <param name="point-left"/>    <!-- reper-point -->
   <param name="point-center"/>    <!-- central point of the accent to be adjusted -->
   <param name="point-right"/>    <!-- reper-point -->
   <param name="contour"/>    <!-- the whole accent -->
   <variable name="displacement-width"/>
   <with-round-state round="to-double-grid">
    <set-equal target="displacement-width" source="(round-black((point-left -- point-right) / 2.0) + coord(point-left)) - coord(point-center)"/>
    <if test="displacement-width != 0.0">
     <shift-absolute pixel-distance="displacement-width">
      <point num="point-center"/>
     </shift-absolute>
     <shift>
      <reference>
       <point num="point-center"/>
      </reference>
      <contour num="contour"/>
     </shift>
    </if>
   </with-round-state>
  </function>
  <!-- center-accent-with-anchor-and-two-reper-points -->
  
  <macro name="shift-edge">
   <param name="shift"/>
   <param name="cv"/>
   <set-equal target="shift" source="0.5p * (control-value(cv) - round-black(control-value(cv)))"/>
  </macro>
  
  <macro name="double-shift-edge">
   <param name="shift"/>
   <param name="cv"/>
   <set-equal target="shift" source="control-value(cv) - round-black(control-value(cv))"/>
  </macro>
  
  <macro name="shift-edge-points">
   <param name="shift"/>
   <param name="point-first"/>
   <param name="point-second"/>
   <set-equal target="shift" source="0.5p * ((point-first --- point-second) - (point-first -- point-second))"/>
   <if test="((point-first -- point-second) &lt;= 1.0p) and (shift &lt; 0)">
    <set-equal target="shift" source="0.0p"/>
   </if>
  </macro>
  
  <macro name="double-shift-edge-points">
   <param name="shift"/>
   <param name="point-first"/>
   <param name="point-second"/>
   <set-equal target="shift" source="(point-first --- point-second) - (point-first -- point-second)"/>
   <if test="((point-first -- point-second) &lt;= 1.0p) and (shift &lt; 0)">
    <set-equal target="shift" source="0.0p"/>
   </if>
  </macro>
  
  <macro name="shift-edge-slanted">
   <param name="shift"/>
   <param name="cv"/>
   <compile-if test="slanted">
    <set-equal target="shift" source="0.5p * ((control-value(cv) / cos-it-ang) - round-black(control-value(cv) / cos-it-ang))"/>
    <else>
     <set-equal target="shift" source="0.5p * (control-value(cv) - round-black(control-value(cv)))"/>
    </else>
   </compile-if>
  </macro>
  
  <macro name="regularize-control-value-width">
   <param name="cv-width"/>   <!-- regularized control value, should not be rounded -->
   <param name="margin"/>   <!-- width of margin, should not be rounded -->
   <set-equal target="width" source="round-white(control-value(index(margin)))"/>
   <if test="width = 0">
    <set-equal target="temp" source="1.0p"/>
    <else>
     <set-equal target="temp" source="width"/>
    </else>
   </if>
   <set-equal target="cv-width" source="round((round(control-value(index(cv-width)) + (2.0p * control-value(index(margin)))) - temp) - width)"/>
  </macro>
  
  <macro name="regularize-control-value-width-two-margin">
   <param name="cv-width"/>   <!-- regularized control value, should not be rounded -->
   <param name="left-margin"/>   <!-- width of margin, should not be rounded -->
   <param name="right-margin"/>   <!-- width of margin, should not be rounded -->
   <set-equal target="width" source="round-white(control-value(index(left-margin)))"/>
   <if test="width = 0">
    <set-equal target="temp" source="1.0p"/>
    <else>
     <set-equal target="temp" source="width"/>
    </else>
   </if>
   <set-equal target="cv-width" source="round(round((control-value(index(cv-width)) + control-value(index(left-margin))  + control-value(index(right-margin))) - temp) - round-white(control-value(index(right-margin))))"/>
  </macro>
  
  <macro name="regularize-control-value-width-two-varmargin">
   <!-- the same as previous but left-margin and right-margin are not control values -->
   <param name="cv-width"/>   <!-- regularized control value, should not be rounded -->
   <param name="left-margin"/>   <!-- variable, width of margin -->
   <param name="right-margin"/>   <!-- variable, width of margin -->
   <set-equal target="width" source="round-white(left-margin)"/>
   <if test="width = 0">
    <set-equal target="temp" source="1.0p"/>
    <else>
     <set-equal target="temp" source="width"/>
    </else>
   </if>
   <set-equal target="cv-width" source="round(round((control-value(index(cv-width)) + left-margin + right-margin) - temp) - round-white(right-margin))"/>
  </macro>
  
  <macro name="regularize-midstem">
   <param name="midstem-height"/>   <!-- regularized control value, should be rounded -->
   <param name="stem-width"/>
   <param name="full-height"/>   <!-- regularized control value, should be rounded -->
   <set-equal target="width" source="(control-value(index(full-height)) - round(control-value(index(stem-width)))) - (2.0p * control-value(index(midstem-height)))"/>
   <if test="width &gt; 0">
    <set-equal target="midstem-height" source="control-value(index(midstem-height)) + 1.0p"/>
   </if>
  </macro>
  
  <!--Used for m, Ш-->
  <macro name="regularize-control-value-double-width-two-varmargin">
   <param name="cv-width"/>   <!-- regularized control value, should not be rounded -->
   <param name="left-margin"/>   <!-- variable, width of margin -->
   <param name="stem-width"/>
   <param name="right-margin"/>   <!-- variable, width of margin -->
   <set-equal target="width" source="round-white(left-margin)"/>
   <if test="width = 0">
    <set-equal target="temp" source="1.0p"/>
    <else>
     <set-equal target="temp" source="width"/>
    </else>
   </if>
   <set-equal target="temp" source="(((round((2.0p * control-value(index(cv-width))) + left-margin + right-margin + control-value(stem-width)) - temp) - round(control-value(stem-width))) - round-white(right-margin))"/>
   <with-round-state round="down-to-grid">
    <set-equal target="cv-width" source="round(temp / 2.0p)"/>
   </with-round-state>
  </macro>
  
  <macro name="regularize-control-value-double-width">
   <param name="cv-width"/>
   <param name="margin"/>
   <param name="stem-width"/>
   <param name="full-width"/>
   <if test="control-value(index(margin)) = 0">
    <set-equal target="temp" source="1.0p"/>
    <else>
     <set-equal target="temp" source="control-value(index(margin))"/>
    </else>
   </if>
   <set-equal target="temp" source="round(full-width) - ((((2.0p * control-value(index(cv-width))) + control-value(index(margin))) + (control-value(stem-width))) + temp)"/>
   <with-round-state round="down-to-grid">
    <set-equal target="cv-width" source="control-value(index(cv-width)) + round(temp / 2.0p)"/>
   </with-round-state>
  </macro>
  
  <macro name="shift-accent">
   <param name="point-base-left"/>
   <param name="point-base-right"/>
   <param name="point-acc-left"/>
   <param name="point-acc-right"/>
   
   <if test="pixels-per-em &lt; max-x-shift">
    <set-equal target="width-left" source="round(point-base-left -- point-acc-left)"/>
    <set-equal target="width-right" source="round(point-base-right -- point-acc-right)"/>
    <if test="(width-right &gt; 0) and (width-left &gt; 0)">
     <shift-absolute pixel-distance="-1.0p">
      <point num="point-acc-left"/>
     </shift-absolute>
    </if>
    <else>
     <if test="(width-right &lt; 0) and (width-left &lt; 0)">
      <shift-absolute pixel-distance="1.0p">
       <point num="point-acc-left"/>
      </shift-absolute>
     </if>
    </else>
   </if>
  </macro>
  
  <macro name="center-accent">
   <param name="point-base-left"/>
   <param name="point-base-right"/>
   <param name="point-acc-left"/>
   <param name="point-acc-right"/>
   
   <if test="pixels-per-em &lt; max-x-shift">
    <with-round-state round="down-to-grid">
     <set-equal target="temp" source="round((((coord(point-base-right) + coord(point-base-left)) - coord(point-acc-left)) - coord(point-acc-right)) / 2.0)"/>
     <if test="temp != 0.0">
      <shift-absolute pixel-distance="temp">
       <point num="point-acc-left"/>
      </shift-absolute>
     </if>
    </with-round-state>
   </if>
  </macro>
  
  <macro name="center-accent-extremum">
   <param name="point-base-anchor"/>
   <param name="point-acc-left"/>
   <param name="point-acc-right"/>
   
   <if test="pixels-per-em &lt; max-x-shift">
    <with-round-state round="down-to-grid">
     <set-equal target="temp" source="round(coord(point-base-anchor) - ((coord(point-acc-left) + coord(point-acc-right)) / 2.0))"/>
     <if test="temp != 0.0">
      <shift-absolute pixel-distance="temp">
       <point num="point-acc-left"/>
      </shift-absolute>
     </if>
    </with-round-state>
   </if>
  </macro>
  
  <macro name="shift-slanted-vstem">
   <param name="point-left"/>
   <param name="cv"/>
   <param name="check-left-border" value="0"/>
   
   <!--  vectors should be set to x-axis, round state should be to-grid -->
   <set-equal target="width" source="(y-coord(point-left) * tg-it-ang-sto) / 100p"/>
   <compile-if test="check-left-border">
    <if test="width &lt; 0.5p">
     <add value1="width" value2="1.0p"/>
    </if>
   </compile-if>
   <shift-absolute pixel-distance="width - round(width)">
    <point num="point-left"/>
   </shift-absolute>
   <compile-if test="smooth">
    <if test="horizontal-smoothing">
     <call-macro name="shift-edge">
      <with-param name="shift" value="temp"/>
      <with-param name="cv" value="cv"/>
     </call-macro>
     <shift-absolute pixel-distance="negative(temp)">
      <point num="point-left"/>
     </shift-absolute>
    </if>
   </compile-if>
  </macro>
  
 </xgridfit>
