<?xml version="1.0"?>
<xgridfit xmlns="http://xgridfit.sourceforge.net/Xgridfit2">
 <!--Cyr Lj-->
 <glyph ps-name="afii10058">
  
  <!--
      
      Copyright (C) 2008, 2010, 2012 Andrey V. Panov
      
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General Public License
      along with this program.  If not, see "http://www.gnu.org/licenses/".
      
      -->
  
  <param name="x-baseline" value="cap-x-baseline"/>
  <param name="o-baseline" value="cap-o-baseline"/>
  <param name="x-height" value="cap-x-height"/>
  <param name="curve-hstem" value="cap-curve-hstem"/>
  <param name="horiz-stem" value="cap-horiz-stem"/>
  <param name="vert-stem" value="cap-vert-stem"/>
  <param name="vert-thinstem" value="cap-vert-thinstem"/>
  <param name="cyrl-space" value="cap-cyrl-space"/>
  <param name="intersect-height" value="cap-h-intersect-height"/>
  <param name="soft-space" value="cap-b-low-space"/>
  <param name="curve-stem" value="cap-o-curve-stem"/>
  
  <constant name="curl-left-bottom" value="first-point"/>
  <constant name="curl-left-top" value="curl-left-bottom + hstem-vcount"/>
  <constant name="curl-right-top" value="curl-left-top + 1 + smooth-count"/>
  <constant name="lstem-left-bottom" value="curl-right-top + 3"/>
  <constant name="lstem-left-top" value="lstem-left-bottom + smooth-count"/>
  <constant name="rstem-right-top" value="lstem-left-top + hstem-vcount"/>
  <constant name="up-inner-left-bottom" value="rstem-right-top + smooth-count"/>
  <constant name="up-inner-right-bottom" value="up-inner-left-bottom + 1"/>
  <constant name="low-outer-right" value="up-inner-right-bottom + 3"/>
  <constant name="right-bottom" value="low-outer-right + 3"/>
  <constant name="rstem-left-bottom" value="right-bottom + smooth-count"/>
  <constant name="rstem-left-top" value="rstem-left-bottom + smooth-count"/>
  <constant name="lstem-right-top" value="rstem-left-top + 1"/>
  <constant name="lstem-right-bottom" value="lstem-right-top + 1"/>
  <constant name="curl-right-bottom" value="lstem-right-bottom + 3"/>
  <constant name="low-inner-left-bottom" value="curl-right-bottom + 2"/>
  <constant name="low-inner-right-bottom" value="low-inner-left-bottom + 1"/>
  <constant name="low-inner-right" value="low-inner-right-bottom + 3"/>
  <constant name="low-inner-right-top" value="low-inner-right + 3"/>
  <constant name="low-inner-left-top" value="low-inner-right-top + 1"/>
  <constant name="last" value="low-inner-left-top"/>
  
  <compile-if test="slanted">
   <set-freedom-vector x-component="x-skew2" y-component="y-skew2"/>
   <set-projection-vector axis="y"/>
   <!--   <set-round-state round="to-grid"/> -->
   <else>
    <set-vectors axis="y"/>
   </else>
  </compile-if>
  <compile-if test="smooth">
   <if test="vertical-smoothing">
    <set-round-state round="no"/>
   </if>
  </compile-if>
  
  <move distance="o-baseline">
   <point num="curl-right-bottom"/>
   <move distance="curve-hstem" color="black">
    <point num="curl-right-top"/>
   </move>
  </move>
  <move distance="x-baseline">
   <point num="rstem-left-bottom"/>
   <align>
    <point num="right-bottom"/>
    <point num="curl-left-bottom"/>
   </align>
   <move distance="horiz-stem" color="black">
    <point num="low-inner-left-bottom"/>
    <align>
     <point num="low-inner-right-bottom"/>
     <point num="curl-left-top"/>
    </align>
   </move>
  </move>
  <move distance="x-height">
   <point num="lstem-left-top"/>
   <align>
    <point num="rstem-right-top"/>
   </align>
   <move distance="horiz-stem" color="black">
    <point num="lstem-right-top"/>
    <align>
     <point num="rstem-left-top"/>
    </align>
   </move>
  </move>
  <move distance="intersect-height">
   <point num="low-inner-left-top"/>
   <align>
    <point num="low-inner-right-top"/>
   </align>
   <move distance="horiz-stem" color="black">
    <point num="up-inner-left-bottom"/>
    <align>
     <point num="up-inner-right-bottom"/>
    </align>
   </move>
  </move>
  <!--  <compile-if test="smooth">
   <if test="vertical-smoothing">
    <shift-absolute pixel-distance="vgrayshift-">
     <point num="curl-left-bottom"/>
     <point num="curl-right-bottom"/>
     <point num="rstem-left-bottom"/>
     <point num="right-bottom"/>
     <point num="lstem-right-top"/>
     <point num="rstem-left-top"/>
    </shift-absolute>
    <shift-absolute pixel-distance="vgrayshift">
     <point num="curl-left-top"/>
     <point num="curl-left-top + 1"/>
     <point num="lstem-left-top"/>
     <point num="rstem-right-top"/>
     <point num="up-inner-left-bottom"/>
     <point num="up-inner-right-bottom"/>
    </shift-absolute>
   </if>
  </compile-if>-->
  
  <compile-if test="slanted">
   <set-projection-vector x-component="x-skew1" y-component="y-skew1"/>
   <set-freedom-vector axis="x"/>
   <set-round-state round="no"/>
   <else>
    <set-vectors axis="x"/>
    <compile-if test="smooth">
     <if test="vertical-smoothing">
      <set-round-state round="to-grid"/>
     </if>
    </compile-if>
   </else>
  </compile-if>
  
  <move color="white">
   <reference>
    <point num="left-bearing"/>
   </reference>
   <point num="lstem-left-bottom"/>
   <align>
    <point num="lstem-left-top"/>
   </align>
   <move distance="vert-thinstem" color="black">
    <point num="lstem-right-top"/>
    <align>
     <point num="lstem-right-bottom"/>
    </align>
   </move>
   <move distance="cyrl-space" color="black">
    <point num="rstem-right-top"/>
    <align>
     <point num="up-inner-left-bottom"/>
     <point num="low-inner-left-top"/>
     <point num="low-inner-left-bottom"/>
    </align>
    <move distance="vert-stem" color="black">
     <point num="rstem-left-bottom"/>
     <align>
      <point num="rstem-left-top"/>
     </align>
     <move distance="soft-space" color="black">
      <point num="low-outer-right"/>
      <move distance="curve-stem" color="black" compile-if="slanted = 0">
       <point num="low-inner-right"/>
      </move>
      <move min-distance="no" color="white" compile-if="slanted = 0">
       <point num="right-bearing"/>
      </move>
     </move>
    </move>
   </move>
  </move>
  <compile-if test="slanted">
   <set-equal target="temp" source="left-bearing -- lstem-left-bottom"/>
   <set-round-state round="to-grid"/>
   <round value="temp" result-to="width"/>
   <multiply value1="width" value2="cos-it-ang"/>
   <set-projection-vector axis="x"/>
   <shift-absolute pixel-distance="width - temp">
    <point num="lstem-left-bottom"/>
    <point num="lstem-left-top"/>
    <point num="lstem-right-top"/>
    <point num="lstem-right-bottom"/>
    <point num="rstem-left-bottom"/>
    <point num="rstem-left-top"/>
    <point num="rstem-right-top"/>
    <point num="up-inner-left-bottom"/>
    <point num="low-inner-left-top"/>
    <point num="low-inner-left-bottom"/>
    <point num="low-outer-right"/>
   </shift-absolute>
   <move>
    <point num="low-outer-right"/>
    <move distance="curve-stem" color="black">
     <point num="low-inner-right"/>
    </move>
    <move min-distance="no" color="white">
     <point num="right-bearing"/>
    </move>
   </move>
  </compile-if>
  <compile-if test="smooth">
   <if test="horizontal-smoothing">
    <compile-if test="slanted = 0">
     <call-macro name="shift-edge">
      <with-param name="shift" value="temp"/>
      <with-param name="cv" value="index(vert-stem)"/>
     </call-macro>
     <shift-absolute pixel-distance="negative(temp)">
      <point num="rstem-left-bottom"/>
      <point num="rstem-left-top"/>
     </shift-absolute>
     <shift-absolute pixel-distance="temp">
      <point num="rstem-right-top"/>
      <point num="up-inner-left-bottom"/>
      <point num="low-inner-left-top"/>
      <point num="low-inner-left-bottom"/>
     </shift-absolute>
     <call-macro name="shift-edge">
      <with-param name="shift" value="temp"/>
      <with-param name="cv" value="index(vert-thinstem)"/>
     </call-macro>
     <shift-absolute pixel-distance="negative(temp)">
      <point num="lstem-left-bottom"/>
      <point num="lstem-left-top"/>
     </shift-absolute>
     <shift-absolute pixel-distance="temp">
      <point num="lstem-right-top"/>
      <point num="lstem-right-bottom"/>
     </shift-absolute>
    </compile-if>
    <call-macro name="shift-edge">
     <with-param name="shift" value="temp"/>
     <with-param name="cv" value="curve-stem"/>
    </call-macro>
    <shift-absolute pixel-distance="negative(temp)">
     <point num="low-inner-right"/>
    </shift-absolute>
    <shift-absolute pixel-distance="temp">
     <point num="low-outer-right"/>
    </shift-absolute>
   </if>
   <compile-if test="slanted = 0">
    <move round="to-grid">
     <point num="right-bearing"/>
    </move>
   </compile-if>
  </compile-if>
  
  <interpolate-untouched-points/>
 </glyph>
 
</xgridfit>
