# Copyright (C) 2008 Andrey V. Panov
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
# This fontforge script proposed for making combining glyphs
#

#italic_angle=$italicangle
pi=4.0*ATan2(1.0,1.0)
tan_it = 1.0*Tan($italicangle*pi/180.0)

Reencode("unicode")

make_dup_rot.ff("uni02D2","uni02D3",tan_it,-10000)
dub_aligned.ff("uni02D2","uni02BE","tilde",tan_it)
dub_aligned.ff("uni02D3","uni02BF","tilde",tan_it)
make_dup_vertshift.pe("grave","uni02CE",1.2,tan_it)
make_dup_vertshift.pe("acute","uni02CF",1.2,tan_it)
make_dup_vertshift.pe("uni02C8","uni02CC",1.2,tan_it)
make_comb.ff("grave","gravecomb")
make_comb.ff("acute","acutecomb")
make_comb.ff("circumflex","uni0302")
make_comb.ff("tilde","uni0303")
make_comb.ff("macron","uni0304")
make_comb.ff("breve","uni0306")
make_comb.ff("dotaccent","uni0307")
make_comb.ff("dieresis","uni0308")
make_comb.ff("space_hookabovecomb","uni0309")
make_comb.ff("ring","uni030A")
make_comb.ff("hungarumlaut","uni030B")
make_comb.ff("caron","uni030C")
make_comb.ff("space_uni030D","uni030D")
make_comb.ff("space_uni030E","uni030E")
make_comb.ff("space_uni030F","uni030F")
make_comb.ff("space_uni0312","uni0312")
make_comb.ff("uni1FBF","uni0313")
make_comb.ff("uni1FFE","uni0314")
make_comb.ff("uni02CE","uni0316")
make_comb.ff("uni02CF","uni0317")
make_comb.ff("cedilla","uni0327")
make_comb.ff("ogonek","uni0328")
make_comb.ff("space_uni0321","uni0321")
make_comb.ff("space_uni0322","uni0322")
make_comb.ff("space_uni0326","uni0326")
make_comb.ff("space_uni032A","uni032A")
make_comb.ff("space_uni032B","uni032B")
make_comb.ff("underscore","uni0332")
make_comb.ff("slash","uni0338")
make_comb.ff("space_uni033A","uni033A")
make_comb.ff("space_uni033B","uni033B")
make_comb.ff("space_uni033C","uni033C")
make_comb.ff("space_uni034D","uni034D")
if (!WorthOutputting("uni0311") )
 Select("uni0306")
 Copy()
 Select("uni0311")
 Paste()
 Rotate(180)
endif
#if (!WorthOutputting("space_uni030F") )
# Select("hungarumlaut")
# width = GlyphInfo("RBearing") - GlyphInfo("LBearing") - GlyphInfo("Width")
# Copy()
# Select("uni030F")
# Paste()
# HFlip()
# CorrectDirection()
# Move(width,0)
# RoundToInt()
# AutoHint()
#endif
hflip_glyph.ff("hungarumlaut","space_uni030F",$italicangle*100)
make_comb.ff("space_uni030F","uni030F")
make_dup_rot.ff("breve.cap","space_uni0311.cap",tan_it,-10000)
hflip_glyph.ff("hungarumlaut.cap","space_uni030F.cap",$italicangle*100)

make_comb.ff("grave.cap","uni0300.cap")
make_comb.ff("acute.cap","uni0301.cap")
make_comb.ff("circumflex.cap","uni0302.cap")
make_comb.ff("tilde.cap","uni0303.cap")
make_comb.ff("macron.cap","uni0304.cap")
make_comb.ff("breve.cap","uni0306.cap")
make_comb.ff("dotaccent.cap","uni0307.cap")
make_comb.ff("dieresis.cap","uni0308.cap")
make_comb.ff("ring.cap","uni030A.cap")
make_comb.ff("hungarumlaut.cap","uni030B.cap")
make_comb.ff("caron.cap","uni030C.cap")
make_comb.ff("space_uni030F.cap","uni030F.cap")
make_comb.ff("space_uni0311.cap","uni0311.cap")

make_dup_vertshift.pe("uni0307","uni0323",1.1,tan_it) # dotbelowcomb
make_dup_vertshift.pe("uni0308","uni0324",1.1,tan_it)
make_dup_vertshift.pe("uni030C","uni032C",1.1,tan_it)
make_dup_vertshift.pe("uni0302","uni032D",1.1,tan_it)
make_dup_vertshift.pe("uni0306","uni032E",1.1,tan_it)
make_dup_vertshift.pe("uni0307.cap","uni0323.cap",1.1,tan_it) 
make_dup_vertshift.pe("uni0308.cap","uni0324.cap",1.1,tan_it)
make_dup_vertshift.pe("uni030A.cap","uni0325.cap",1.1,tan_it)
make_dup_vertshift.pe("uni0302.cap","uni032D.cap",1.1,tan_it)
make_dup_vertshift.pe("uni0306.cap","uni032E.cap",1.1,tan_it)
make_dup_vertshift.pe("uni0303.cap","uni0330.cap",1.2,tan_it)

#make_dup_vertshift.pe("underscore","uni0305",5.2,tan_it) # !!! Redesign
make_cap_accent.ff("underscore","uni0305","macron",tan_it)
make_dup_vertshift.pe("quoteright","uni0315",-0.2,tan_it)
make_dup_vertshift.pe("advancing","uni0318",1.2,tan_it)
make_dup_vertshift.pe("retracting","uni0319",1.2,tan_it)
make_dup_vertshift.pe("uni02D4","uni031D",1.2,tan_it)
make_dup_vertshift.pe("uni02D5","uni031E",1.2,tan_it)
make_dup_vertshift.pe("uni02D6","uni031F",1.2,tan_it)
make_dup_vertshift.pe("uni02D7","uni0320",1.2,tan_it)
make_dup_vertshift.pe("tilde","uni0330",1.2,tan_it)
make_dup_vertshift.pe("macron","uni0331",1.2,tan_it)
make_dup_vertshift.pe("tilde","uni0334",0.5,tan_it)
make_dup_vertshift.pe("uni0311","uni032F",1.2,tan_it)
make_dup_vertshift.pe("ring","uni0325",1.1,tan_it)
make_dup_vertshift.pe("uni02FA","uni031A",-0.2,tan_it)
#make_dup_vertshift.pe("uni02DF","uni033D",-0.2,tan_it)
make_comb.ff("uni02DF","uni033D")
dub_aligned.ff("uni032A","uni0346","tilde",tan_it)
#make_dup_vertshift.pe("uni032A","uni0346",8.0,tan_it)
make_dup_vertshift.pe("uniFE66","uni0347",1.2,tan_it)
make_dup_vertshift.pe("uni030E","uni0348",1.2,tan_it)
make_dup_vertshift.pe("uni02FA","uni0349",1.1,tan_it)
make_cap_accent.ff("longleveltone","uni02CD","underscore",tan_it)
make_cap_accent.ff("uni02CC","uni0329","uni031F",tan_it)
make_cap_accent.ff("uni0304.cap","uni0331.cap","uni0331",tan_it)
dub_glyph.pe("uni02CD","uni0331")
make_dup_rot.ff("uni032A","uni033A",tan_it,-10000)
dub_aligned.ff("uni02BE","uni0339","uni0330",tan_it)
dub_aligned.ff("uni02BF","uni031C","uni0330",tan_it)
#make_dup_vertshift.pe("uni02BE","uni0339",1.2,tan_it)
#make_dup_vertshift.pe("uni02BF","uni031C",1.2,tan_it)
make_dup_rot.ff("uni0361","uni035D",tan_it,-10000)
make_dup_vertshift.pe("uni035D","uni035C",1.3,tan_it)
make_dup_rot.ff("uni0318","uni0319",tan_it,-10000)

Reencode("unicode")

 # Move combining glyphs to left and set their width to zero if non-zero
 Select(0u300,0u314)
 Select(0u316,0u319)
 Select(0u31C,0u34E)
 SelectMore(0u0484,0u0489)
 SelectMore(0u1DC0,0u1DFF)
 foreach
  if ( WorthOutputting() )
   width = GlyphInfo ("Width")
   if (width > 0)
    Move(-width,0)
    SetWidth(0)
   endif
  endif
 endloop

 Select(0u362)
 SelectMore(0u0315) # ?
# SelectMore(0u035D) 
 SelectMore(0u0360) # ?
 SelectMore(0u0483) # ?
 foreach
  if ( WorthOutputting() )
   width = GlyphInfo ("Width")
   Move(-width/2,0)
   SetWidth(0)
  endif
 endloop
