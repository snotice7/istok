<?xml version="1.0"?>
<xgridfit xmlns="http://xgridfit.sourceforge.net/Xgridfit2">
 <glyph ps-name="S" init-graphics="yes">
  
  <!--
      
      Copyright (C) 2008, 2009, 2010 Andrey V. Panov
      
      This program is free software: you can redistribute it and/or modify
      it under the terms of the GNU General Public License as published by
      the Free Software Foundation, either version 3 of the License, or
      (at your option) any later version.
      
      This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
      GNU General Public License for more details.
      
      You should have received a copy of the GNU General Public License
      along with this program.  If not, see "http://www.gnu.org/licenses/".
      
      -->
  
  <param name="baseline" value="cap-o-baseline"/>
  <param name="height" value="cap-o-height"/>
  <param name="up-vert-stem" value="cap-vert-stem"/>
  <param name="low-vert-stem" value="cap-o-curve-stem"/>
  <param name="horiz-stem" value="cap-curve-hstem"/>
  <param name="c-flat-ends" value="cap-c-flat-ends"/>
  <param name="s-flat-upper-end" value="15"/>
  <param name="diag" value="cap--diag"/>
  
  <constant name="lower-end-bottom" value="0"/>
  <constant name="real-lower-end-bottom" value="1"/>
  <constant name="real-lower-end-top" value="real-lower-end-bottom + hstem-hcount"/>
  <constant name="lower-end-top" value="lower-end-bottom + open-end-count"/>
  <constant name="inner-bottom" value="lower-end-top + 3"/>
  <constant name="inner-right" value="inner-bottom + 4"/>
  <constant name="diag-left-bottom" value="inner-right + 4"/>
  <constant name="diag-left-top" value="diag-left-bottom + 3"/>
  <constant name="outer-left" value="diag-left-top + 4"/>
  <constant name="outer-top" value="outer-left + 4"/>
  <constant name="upper-end-top" value="outer-top + 3"/>
  <constant name="upper-end-bottom" value="upper-end-top + open-end-count"/>
  <constant name="real-upper-end-top" value="outer-top + 3 + 1"/>
  <constant name="real-upper-end-bottom" value="real-upper-end-top + hstem-hcount"/>
  <constant name="inner-top" value="upper-end-bottom + 3"/>
  <constant name="inner-left" value="inner-top + 4"/>
  <constant name="diag-right-top" value="inner-left + 4"/>
  <constant name="diag-right-bottom" value="diag-right-top + 3"/>
  <constant name="outer-right" value="diag-right-bottom + 4"/>
  <constant name="outer-bottom" value="outer-right + 4"/>
  <constant name="last" value="outer-bottom + 2"/>
  
  <line name="diagonal-left-side">
   <point num="diag-left-bottom"/>
   <point num="diag-left-top"/>
  </line>
  <line name="diagonal-right-side">
   <point num="diag-right-bottom"/>
   <point num="diag-right-top"/>
  </line>
  
  <!--  <compile-if test="slanted">
   <set-projection-vector x-component="x-skew1" y-component="y-skew1"/>
   <set-freedom-vector axis="x"/>
   <set-round-state round="no"/>
   <else>-->
    <set-vectors axis="x"/>
    <!--   </else>
  </compile-if>-->
  
  <move color="white">
   <reference>
    <point num="left-bearing"/>
   </reference>
   <point num="outer-left"/>
   <interpolate>
    <point num="lower-end-bottom"/>
    <point num="lower-end-top"/>
   </interpolate>
   <move distance="up-vert-stem" color="black">
    <point num="inner-left"/>
   </move>
   <move min-distance="no" color="white" compile-if="slanted">
    <point num="outer-right"/>
    <move distance="low-vert-stem" color="black">
     <point num="inner-right"/>
     <interpolate>
      <point num="upper-end-top"/>
      <point num="upper-end-bottom"/>
     </interpolate>
    </move>
    <move color="white">
     <point num="right-bearing"/>
    </move>
   </move>
  </move>
  <move min-distance="no" color="white" compile-if="slanted = 0">
   <reference>
    <point num="right-bearing"/>
   </reference>
   <point num="outer-right"/>
   <move distance="low-vert-stem" color="black">
    <point num="inner-right"/>
    <interpolate>
     <point num="upper-end-top"/>
     <point num="upper-end-bottom"/>
    </interpolate>
   </move>
  </move>
  <interpolate>
   <reference>
    <point num="outer-left"/>
    <point num="outer-right"/>
   </reference>
   <point num="diag-right-top"/>
   <point num="diag-right-bottom"/>
  </interpolate>
  <!--  <compile-if test="slanted">
   <with-projection-vector axis="x">
    <move distance="low-vert-stem" color="black">
     <reference>
      <point num="outer-right"/>
     </reference>
     <point num="inner-right"/>
     <interpolate>
      <point num="upper-end-top"/>
      <point num="upper-end-bottom"/>
     </interpolate>
    </move>
   </with-projection-vector>
   <align>
    <reference>
     <point num="outer-left"/>
    </reference>
    <point num="outer-left - 1"/>
    <point num="outer-left + 1"/>
   </align>
   <align>
    <reference>
     <point num="inner-left"/>
    </reference>
    <point num="inner-left + 1"/>
    <point num="inner-left - 1"/>
   </align>
   <align>
    <reference>
     <point num="outer-right"/>
    </reference>
    <point num="outer-right - 1"/>
    <point num="outer-right + 1"/>
   </align>
  </compile-if>-->
  <compile-if test="smooth">
   <if test="horizontal-smoothing">
    <call-macro name="shift-edge">
     <with-param name="shift" value="temp"/>
     <with-param name="cv" value="low-vert-stem"/>
    </call-macro>
    <shift-absolute pixel-distance="negative(temp)">
     <point num="inner-right"/>
    </shift-absolute>
    <shift-absolute pixel-distance="temp">
     <point num="outer-right"/>
    </shift-absolute>
    <call-macro name="shift-edge">
     <with-param name="shift" value="temp"/>
     <with-param name="cv" value="up-vert-stem"/>
    </call-macro>
    <shift-absolute pixel-distance="negative(temp)">
     <point num="outer-left"/>
    </shift-absolute>
    <shift-absolute pixel-distance="temp">
     <point num="inner-left"/>
    </shift-absolute>
   </if>
  </compile-if>
  
  <!--  <compile-if test="slanted">
   <set-freedom-vector x-component="x-skew2" y-component="y-skew2"/>
   <set-projection-vector axis="y"/>
   <set-round-state round="to-grid"/>
   <else>-->
    <set-vectors axis="y"/>
  <compile-if test="smooth">
    <if test="vertical-smoothing">
     <set-round-state round="no"/>
    </if>
  </compile-if>
    <!--   </else>
  </compile-if>-->
  
  <move distance="baseline">
   <point num="outer-bottom"/>
   <move distance="horiz-stem" color="black">
    <point num="inner-bottom"/>
   </move>
  </move>
  <move distance="height">
   <point num="outer-top"/>
   <move distance="horiz-stem" color="black">
    <point num="inner-top"/>
   </move>
  </move>
  <interpolate>
   <reference>
    <point num="inner-bottom"/>
    <point num="inner-top"/>
   </reference>
   <point num="diag-right-bottom"/>
   <point num="diag-right-top"/>
   <point num="outer-left"/>
   <point num="outer-left - 1"/>
   <point num="outer-right"/>
   <point num="outer-right - 1"/>
   <point num="inner-left"/>
   <point num="inner-left + 1"/>
   <point num="inner-right"/>
  </interpolate>
  <if test="pixels-per-em &lt; c-flat-ends">
   <align>
    <reference>
     <point num="outer-bottom"/>
    </reference>
    <point num="real-lower-end-bottom"/>
   </align>
   <align>
    <reference>
     <point num="inner-bottom"/>
    </reference>
    <point num="real-lower-end-top"/>
   </align>
   <else>
    <interpolate>
     <reference>
      <point num="inner-bottom"/>
      <point num="diag-right-bottom"/>
     </reference>
     <point num="real-lower-end-bottom"/>
     <point num="real-lower-end-top"/>
    </interpolate>
   </else>
  </if>
  <if test="pixels-per-em &lt; s-flat-upper-end and not(is-glyph-grayscale)">
   <align>
    <reference>
     <point num="inner-top"/>
    </reference>
    <point num="real-upper-end-bottom"/>
   </align>
   <align>
    <reference>
     <point num="outer-top"/>
    </reference>
    <point num="real-upper-end-top"/>
   </align>
   <else>
    <interpolate>
     <reference>
      <point num="inner-top"/>
      <point num="diag-right-bottom"/>
     </reference>
     <point num="real-upper-end-bottom"/>
     <point num="real-upper-end-top"/>
    </interpolate>
    <!--    <compile-if test="smooth">
     <if test="vertical-smoothing = 0">
      <mdap round="up-to-grid">
       <point num="real-upper-end-bottom"/>
      </mdap>
      <mdap round="up-to-grid">
       <point num="real-upper-end-top"/>
      </mdap>
     </if>
    </compile-if>-->
   </else>
  </if>
  
  <with-minimum-distance value="diag-min-thick">
   <diagonal-stem distance="diag" save-vectors="yes" round="no" color="black">
    <line ref="diagonal-right-side"/>
    <line ref="diagonal-left-side"/>
    <align>
     <point num="diag-right-top"/>
     <point num="diag-right-bottom"/>
    </align>
    <align>
     <point num="diag-left-bottom"/>
     <point num="diag-left-top"/>
    </align>
   </diagonal-stem>
  </with-minimum-distance>
  
  <interpolate-untouched-points/>
 </glyph>
 
 <glyph ps-name="s" init-graphics="yes">
  <call-glyph ps-name="S">
   <with-param name="baseline" value="small-o-baseline"/>
   <with-param name="height" value="small-o-height"/>
   <with-param name="up-vert-stem" value="small-vert-stem"/>
   <with-param name="low-vert-stem" value="small-o-curve-stem"/>
   <with-param name="horiz-stem" value="small-curve-hstem"/>
   <with-param name="c-flat-ends" value="small-c-flat-ends"/>
   <with-param name="s-flat-upper-end" value="17"/>
   <with-param name="diag" value="small--diag"/>
  </call-glyph>
 </glyph>
</xgridfit>
